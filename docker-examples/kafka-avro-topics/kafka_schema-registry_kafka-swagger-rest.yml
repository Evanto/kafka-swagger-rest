version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:5.1.0
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:5.1.0
    depends_on:
      - kafka
      - zookeeper
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # Workaround container to create topics
  # We override the image's `command` anyways, hence this container will not start a broker.
  kafka-init-topics-and-schemas:
    image: confluentinc/cp-kafka:5.1.0
    depends_on:
      - kafka
      - schema-registry
    command: |
      bash -c 'echo Waiting for Kafka to be ready... && \
        cub kafka-ready -b kafka:29092 1 20 && \
        kafka-topics --create --topic users --partitions 1 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
        kafka-topics --create --topic topic-primitive-nullable --partitions 1 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
        kafka-topics --create --topic topic-primitive-types --partitions 1 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
        kafka-topics --create --topic topic-linkedlist --partitions 1 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \

        echo Waiting for schema-registry to be ready... && \
        cub sr-ready schema-registry 8081 20 && \
        for item in "users-value" "topic-linkedlist-value" "topic-primitive-nullable-value" "topic-primitive-types-value"; do curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" \
        --data "{\"schema\": \"$$(python /util/stringify.py /avro/$$item.avsc)\" }" \
        http://schema-registry:8081/subjects/$$item/versions; done
        '
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    volumes:
      - ./avro:/avro
      - ./util:/util
    networks:
      - default

  kafka-swagger-rest:
    image: kafka-swagger-rest:0.1-SNAPSHOT-latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
      - zookeeper
      - schema-registry
      - kafka-init-topics-and-schemas
    command: [ "java", "-Dreactor.netty.http.server.accessLogEnabled=true",
               "-jar", "/kafka-swagger-rest-0.1-SNAPSHOT.jar"]
    environment:
      swagger_kafka_0_groupName: 'localhost-kafka'
      swagger_kafka_0_bootstrapServers: 'kafka:29092'
      swagger_kafka_0_schemaRegistryUrl: 'http://host.docker.internal:8081'
